<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues>
      <ID>ClassNaming:V1__create_tables.kt$V1__create_tables : BaseJavaMigration</ID>
      <ID>ClassNaming:V2__update_user.kt$V2__update_user : BaseJavaMigration</ID>
      <ID>ClassNaming:V3__update_recommandation.kt$V3__update_recommandation : BaseJavaMigration</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$130</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$132</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$66</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$66</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$130</ID>
      <ID>MagicNumber:AuthenticationRequestHandler.kt$AuthenticationRequestHandler$16</ID>
      <ID>MatchingDeclarationName:Cover.kt$Cover</ID>
      <ID>SwallowedException:RecommandationEngine.kt$RecommandationEngine$catch (error: NoSuchElementException) { tokenService.addToken(token.toSimpleToken()) token }</ID>
      <ID>MagicNumber:NotificationServiceImpl.kt$NotificationServiceImpl$7L</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
      <ID>TooManyFunctions:CoverLocalDataSource.kt$CoverLocalDataSource : LocalDataSource</ID>
      <ID>EmptyKtFile:settings.gradle.kts$.settings.gradle.kts</ID>
      <ID>SwallowedException:RecommandationLocalDataSourceImpl.kt$RecommandationLocalDataSourceImpl$catch (error: ExposedSQLException) { exposedLogger.info("Cover ${recommendation.name} is already registered for ${tokenEntity.symbol} token") }</ID>
      <ID>SwallowedException:TokenLocalDataSourceImpl.kt$TokenLocalDataSourceImpl$catch (error: ExposedSQLException) { exposedLogger.info("Cover ${recommendation.name} is already registered for ${tokenEntity.symbol} token") }</ID>
      <ID>UnusedPrivateMember:RecommandationLocalDataSourceImpl.kt$RecommandationLocalDataSourceImpl$private suspend fun addRecommandation( tokenEntity: SimpleToken, recommendation: Cover )</ID>
      <ID>UnusedPrivateMember:TokenLocalDataSourceImpl.kt$TokenLocalDataSourceImpl$val entities = tokens.map { token -> val entity = TokenEntity.new { name = token.name address = token.address owner = token.owner symbol = token.symbol } token.recommendedCovers.forEach { recommendation -> addRecommandation(token, recommendation) } val recommandations = CoverEntity.find { Covers.id inList TokensCovers.select { TokensCovers.token eq entity.id }.map { it[TokensCovers.cover] } } entity.apply { recommendedCovers = recommandations } }</ID>
  </CurrentIssues>
</SmellBaseline>
